# 🔵 S Programming Language — Course Part 2: Pro Mode

Welcome to **Pro Mode** — the advanced level of the S Language, where we unlock more control, power, and performance. You now know the basics… now it’s time to **build real stuff**.

---

## 🔧 What You’ll Learn in Part 2

- 🔌 Using plugins (`plugins(...)`)
- 🖼️ Drawing windows and graphics
- 🧠 Writing faster code with control over memory
- 🔃 Arrays, lists, and loops at speed
- 📦 Modular files and imports
- 🧩 Building your own plugin (intro)
- 🎮 Building a small 2D Game Engine

---

## 🔌 1. Plugins — Superpowers in One Line

Plugins bring power from other languages or libraries (like SDL2, Raylib, Python, C++) into S with one line:

```s
plugins (SDL2)
Now you can instantly do things like:

s
Copy
Edit
create_window("My Game", 800, 600)
draw_circle(200, 200, 50)
refresh()
✅ You can also make your own plugins — more on that later.

📂 2. Imports and Modular Files
You can split large projects into files and use:

s
Copy
Edit
include "math_utils.s"
Or:

s
Copy
Edit
import "player_system.s"
S supports both styles. It works just like #include or import in other languages — simple.

📋 3. Lists (Arrays)
You can store multiple values in a list:

s
Copy
Edit
colors = [ "red", "green", "blue" ]
say colors[1]  # green

colors.add("yellow")
colors.remove("red")
Loop through them like this:

s
Copy
Edit
for color in colors
    say "Color: {color}"
done
🧠 4. Performance Code (Pro Style)
S in Pro Mode lets you get closer to the machine:

s
Copy
Edit
reserve memory 1024  # Reserve 1024 bytes

data = pointer(0)
data.write(0, 255)
value = data.read(0)

say "Value: {value}"
⚠️ Only use this when you really need performance or custom control — safe defaults are still in Basic Mode.

🕹️ 5. Simple Game Engine Example (2D)
Let’s start building a very simple 2D engine using raylib or SDL2 (you choose).

s
Copy
Edit
plugins (raylib)

init_window("S Game", 640, 480)

player_x = 100
player_y = 100

loop window_open()
    if key_down("W")
        player_y = player_y - 5
    done
    if key_down("S")
        player_y = player_y + 5
    done

    clear_screen()
    draw_rect(player_x, player_y, 50, 50, "blue")
    refresh()
done
✅ Runs at real speed — you're building your own engine here.

🧩 6. Your First Plugin
You can create your own plugins with a .plugin.s file in /plugins/YourPlugin/.

Example:

📁 /plugins/mytools/plugin.s:

s
Copy
Edit
func say_hello name
    say "Hello from plugin, {name}!"
done
Then use it like this in your main file:

s
Copy
Edit
plugins (mytools)
say_hello("S Dev")
Plugin hub support will come later, so you can download from GitHub directly.

🔥 7. Optimization Tips (Pro Mode Style)
❌ Avoid unnecessary loops in loops

✅ Use func to split and reuse code

✅ Pre-load or cache data when possible

✅ Prefer built-in tools like random() or math.sqrt()

✅ Use Pro Mode memory functions carefully for control

🧠 8. Project Ideas for Pro Mode
Try building one of these using everything you learned:

🎮 2D Game: Top-down or side-scroller

🖥️ GUI App: Click counter, calculator, file viewer

🤖 Bot: Simple chatbot with responses

📦 Plugin: Your own helper functions or library

🔧 Tool: A terminal tool that runs commands

🎓 What’s Next?
You’ve unlocked Pro Mode — you now understand:

Real-time performance

Plugins and extensions

Simple game building

Working with memory and data

Creating modular codebases

Next up...

📕 Part 3 (Optional): Education Mode
Made for teachers, kids, and total beginners — even easier than Basic S, at the cost of a little performance.

📘 Coming Soon:

Plugin Development Guide

S Game Engine Framework

Plugin Hub + Website

🛠️ You are now an S Pro.
You’re coding. You’re building real stuff. You understand performance and design. Welcome to Pro Mode.

Let’s build the future 🚀
